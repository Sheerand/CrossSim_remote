       '''
       Contains all code snippets taken from StackOverflow
       
       Which are licensed under CC-BY-SA http://creativecommons.org/licenses/by-sa/3.0/
    1: '''
    1: from abc import ABCMeta
       
    1: __all__ = ['DocStringInheritorAbstractBaseClass']
       
    2: class DocStringInheritorAbstractBaseClass(ABCMeta):
           '''
           A metaclass that allows subclasses to inherit docstrings from superclasses
           
           The main reason that this is used is so that docstrings get propagated to subclasses when documentation is being automatically generated by sphinx.
           
           A variation on
           http://groups.google.com/group/comp.lang.python/msg/26f7b4fcb4d66c95
           by Paul McGuire
           
           Taken from http://stackoverflow.com/a/8101118
    1:     '''
    1:     def __new__(cls, name, bases, clsdict):
   17:         if not('__doc__' in clsdict and clsdict['__doc__']):
    6:             for mro_cls in (mro_cls for base in bases for mro_cls in base.mro()):
    3:                 doc=mro_cls.__doc__
    3:                 if doc:
    3:                     clsdict['__doc__']=doc
    3:                     break
  298:         for attr, attribute in clsdict.items():
  281:             if not attribute.__doc__:
  266:                 for mro_cls in (mro_cls for base in bases for mro_cls in base.mro()
  129:                                 if hasattr(mro_cls, attr)):
   62:                     doc=getattr(getattr(mro_cls,attr),'__doc__')
   62:                     if doc:
   62:                         attribute.__doc__=doc
   62:                         break
   17:         return type.__new__(cls, name, bases, clsdict)
